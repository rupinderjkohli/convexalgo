# -*- coding: utf-8 -*-
"""AlgoTrading_v3.2_panel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MuK4_G2Nf8oow21NW_a3pHg_35JgVSI
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import yfinance as yf       #install
import datetime
from datetime import datetime
import time

# %matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.figure import Figure

import csv

import plotly   #install
import plotly.io as pio

import plotly.figure_factory as ff
#importing pybase64 module
import pybase64

# For plotting
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import streamlit as st      #install
# from streamlit_autorefresh import st_autorefresh

import base64
from base64 import b64encode


# from IPython.core.display import HTML # note the library

# from config import Config

# Using plotly dark template
TEMPLATE = 'plotly_dark'

st.set_page_config(layout='wide', page_title='Stock Dashboard', page_icon=':dollar:')

# update every 5 mins
# st_autorefresh(interval=5 * 60 * 1000, key="dataframerefresh")


# print("Plotly Version : {}".format(plotly.__version__))

pd.set_option('display.max_columns', None,
              'display.max_rows', None,
              'display.max_colwidth', None)



# """## stocks"""

def get_all_stock_info(ticker):
  # get all stock info

  info = ticker.info
  info_df = pd.DataFrame.from_dict([info])
  info_df_short = info_df[['symbol', 'shortName', 'exchange', 'quoteType', 'currency',
                           'previousClose', 'open', 'dayLow', 'dayHigh',
                          #  'category', 'navPrice',    # dc, don't know why this is failing?
                          #  'regularMarketPreviousClose', 'regularMarketOpen',
                          #  'regularMarketDayLow', 'regularMarketDayHigh',
                          #  'fiftyTwoWeekLow', 'fiftyTwoWeekHigh', 'fiftyDayAverage',
                          #  'regularMarketVolume',
                          #  'twoHundredDayAverage',
                          #  'trailingPE', 'volume',
                          #  'averageVolume', 'averageVolume10days',
                          #  'averageDailyVolume10Day', 'bid', 'ask', 'bidSize', 'askSize', 'yield',
                          #  'totalAssets', 'trailingAnnualDividendRate',
                          #  'trailingAnnualDividendYield',
                          #  'ytdReturn', 'beta3Year', 'fundFamily', 'fundInceptionDate',
                          #  'legalType', 'threeYearAverageReturn', 'fiveYearAverageReturn',
                          # 'underlyingSymbol',
                          #  'longName', 'firstTradeDateEpochUtc', 'timeZoneFullName',
                          #  'timeZoneShortName', 'uuid', 'messageBoardId', 'gmtOffSetMilliseconds',
                          #  'trailingPegRatio'
                            ]]
  info_df_short.reset_index(inplace=True)

  return info_df_short

def get_hist_info(ticker, period, interval):
  # get historical market data
  hist = ticker.history(period=period, interval=interval)
  return hist

# def plot_stk_charts(df):
#   sns.set(style="whitegrid")
#   fig,axs = plt.subplots(3,2, figsize = (8,10))
#   sns.histplot(data=df, x="Open", kde=True, color="skyblue", ax=axs[0, 0])
#   sns.histplot(data=df, x="High", kde=True, color="olive", ax=axs[0, 1])
#   sns.histplot(data=df, x="Low", kde=True, color="gold", ax=axs[1, 0])
#   sns.histplot(data=df, x="Close", kde=True, color="teal", ax=axs[1, 1])
#   sns.histplot(data=df, x="Volume", kde=True, color="teal", ax=axs[2, 0])
#   sns.histplot(data=df, x="Dividends", kde=True, color="blue", ax=axs[2, 1])
#   fig.tight_layout()
#   return

def get_stk_news(ticker):

  news_df = pd.DataFrame(ticker.news)

  # note the new way of creating column
  news_df = news_df.assign(providerPublishTime_n=lambda x: pd.to_datetime(x.providerPublishTime, unit='s'))

  # display(news_df.info())

  news_df_select = news_df[['title',	'publisher',	'link',	'providerPublishTime_n',	'type'	,'relatedTickers']]

  return news_df_select

# https://coderzcolumn.com/tutorials/data-science/candlestick-chart-in-python-mplfinance-plotly-bokeh#2

def draw_candle_stick_chart(df,symbol):
  candlestick = go.Candlestick(
                            x=df.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
                            open=df['Open'],
                            high=df['High'],
                            low=df['Low'],
                            close=df['Close'],
                            #increasing_line_color= 'green', decreasing_line_color= 'red'
                            )


  fig = go.Figure(data=[candlestick])

  fig.update_layout(
      xaxis_rangeslider_visible=True,
      #width=800, height=600,
      title=symbol,
      yaxis_title= symbol 
  )
  #fig.show()
  return fig

def draw_candle_stick_chart_ma(df):
  candlestick = go.Candlestick(
                            x=df.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
                            open=df['Open'],
                            high=df['High'],
                            low=df['Low'],
                            close=df['Close'],
                            #increasing_line_color= 'green', decreasing_line_color= 'red'
                            )
  sma = go.Scatter(x=df.index,
                  y=df["SMA"],
                  #yaxis="y1",
                  name="SMA",
                  fillcolor = 'black',

                  )
  ema_3day = go.Scatter(x=df.index,
                   y=df["EMA_3day"],
                   name="EMA_3day"
                  )

  ema = go.Scatter(x=df.index,
                   y=df["EMA"],
                   name="EMA"
                  )

  fig = go.Figure(data=[candlestick, sma, ema_3day, ema])

  # fig = go.Figure(data=[candlestick])

  fig.update_layout(
      xaxis_rangeslider_visible=True,
      #width=800, height=600,
      title="NVDA, Today - Dec 2023",
      yaxis_title= symbol #'NVDA Stock'
  )
  fig.show()
  return

def plot_stk_hist(df):
  print("plotting Data and Histogram")
  plt.figure(figsize=(12, 5))
  plt.plot(df.Close, color='green')
  plt.plot(df.Open, color='red')
  plt.ylabel("Counts")
  plt.xlabel("Date")

  return


def sparkline(df, col): #, Avg):
    fig = go.Figure()

    # Plot the Close price
    fig.add_trace(go.Scatter(x=df.index, y=df[col], line_color='blue', line_width=1))

    # # Plot the Avg line
    # fig.add_hline(y=ewm, line_color='indianred', line_width=1)

    # hide and lock down axes
    fig.update_xaxes(visible=False) #, fixedrange=True)
    fig.update_yaxes(visible=True, #fixedrange=True,
                     autorange=True,
                     anchor="free",
                     autoshift=True)

    # plt.ylim()

    # strip down the rest of the plot
    fig.update_layout(
        # template=TEMPLATE,
        width=250,
        height=80,
        showlegend=False,
        margin=dict(t=1,l=1,b=1,r=1)
    )

    # disable the modebar for such a small plot - fig.show commented out for debugging purposes
    # fig.show(config=dict(displayModeBar=False))

    # png = plotly.io.to_image(fig)

    # png_base64 = base64.b64encode(png).decode() #('ascii')
    png_base64 = pybase64.b64encode(fig.to_image()).decode('utf-8') #'ascii')
    # display(png_base64)
    
    #decode base64 string data
    # decoded_data = base64.b64decode(fig.to_image()).decode('utf-8')
    
    # print(type(png_base64))
    sparkline_url = '<img src="data:image/png;pybase64,{}"/>'.format(png_base64)
    # print(type(sparkline_url))
    # print (sparkline_url)
    
    #open file with base64 string data
    # file = open('file1.txt', 'rb')
    # encoded_data = file.read()
    # file.close()
    #decode base64 string data
    decoded_data=pybase64.b64decode((png_base64))
    #write the decoded data back to original format in  file
    img_file = open('image.jpeg', 'wb')
    img_file.write(decoded_data)
    img_file.close()

    #print ('<img src="data:image/png;base64,{}"/>'.format(png_base64))
    return png_base64 #('<img src="data:image/png;base64,{}"/>'.format(decoded_data))
    # return ('<img src="data:/png;pybase64,{}"/>'.format(png_base64))


    
# """### Select Stock and Time interval"""
# https://github.com/smudali/stocks-analysis/blob/main/dasboard/01_Home.py
symbol_list = ['TSLA','NVDA','AMZN','NFLX','BA','GS','SPY','QQQ','IWM','SMH','RSP']

st.sidebar.header("Choose your Stock filter: ")
ticker = st.sidebar.selectbox(
    'Select Ticker', options=symbol_list)
# ticker = st.sidebar.multiselect('Choose Ticker', options=symbol_list,
#                               help = 'Select a ticker', 
#                               key='ticker',
#                               max_selections=None)
selected_period = st.sidebar.selectbox(
    'Select Period', options=['1d','5d','1mo','3mo', '6mo', 'YTD', '1y', 'all'], index=2)
selected_interval = st.sidebar.selectbox(
    'Select Intervals', options=['1m','2m','5m','15m','30m','60m','90m','1h','1d','5d','1wk','1mo','3mo'], index=8)
    

#         Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
# Either Use period parameter or use start and end
#     interval : str
#         Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo

# period = "1mo"
# interval= "1d"
ema_period1 = 5
ema_period2 = 10

# showing for just 1 ticker
yf_data = yf.Ticker(ticker) #initiate the ticker

tab1, tab2 = st.tabs(["ðŸ—ƒ Data","ðŸ“ˆ Chart"])

with tab1:

    # Subheader with company name and symbol
    st.session_state.page_subheader = '{0} ({1})'.format(yf_data.info['shortName'], yf_data.info['symbol'])
    st.subheader(st.session_state.page_subheader)
    # st.write(yf_data)

    stock_info_df = get_all_stock_info(yf_data)
    st.write(stock_info_df.to_html(escape=False, index=False), unsafe_allow_html=True)

    st.divider()

    stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
    st.write(stock_hist_df.to_html(escape=False, index=True), unsafe_allow_html=True)
    st.divider()

with tab2:
    fig = draw_candle_stick_chart(stock_hist_df, ticker)
    # Plot!
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)

  


# # https://www.quantstart.com/articles/candlestick-subplots-with-plotly-and-the-alphavantage-api/

# etf_info = pd.DataFrame()
# etf_data = {} # dictionary
# for symbol in symbol_list:
#     ticker = yf.Ticker(symbol)
#     # df = get_all_stock_info(ticker)

#     etf_data[symbol] = get_hist_info(ticker, period, interval)
#     etf_info = pd.concat([get_all_stock_info(ticker), etf_info], ignore_index=True)

#     # History data for 12 months
#     history = ticker.history(period='1y')[['Open', 'Close']]
#     # Convert the history series to a DF
#     history_df = history #.to_frame()
#     # display (ticker)
#     # display (history_df.head(5))

#     # # Add the sparkline for 12 month Open history data
#     # spark_img = sparkline(history_df, 'Open')
#     # spark_img_url =  ('<img src="data:/png;pybase64,{}"/>'.format(spark_img))
#     # etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Open'] = (spark_img_url)

#     # # Add the sparkline for 12 month Close history data
#     # etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Close'] = sparkline(history_df, 'Close')

    
# etf_info = etf_info.drop(columns=['index']   )
# st.write(etf_info)

# #########################################################
# IGNORE BELOW
# #########################################################
