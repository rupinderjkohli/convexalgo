# -*- coding: utf-8 -*-
"""AlgoTrading_v3.2_panel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MuK4_G2Nf8oow21NW_a3pHg_35JgVSI
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import yfinance as yf       #install
import datetime
from datetime import datetime
import time

# %matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.figure import Figure

import csv

import plotly   #install
import plotly.io as pio

import Kaleido  #install

pio.Kaleido.scope.default_format = "png"

import plotly.graph_objects as go
# import seaborn as sns

# import panel as pn      #install

import streamlit as st      #install

import base64
from base64 import b64encode


# from IPython.core.display import HTML # note the library

# from config import Config

# Using plotly dark template
TEMPLATE = 'plotly_dark'


# !pip install streamlit

# !pip install -U kaleido


# print("Plotly Version : {}".format(plotly.__version__))

pd.set_option('display.max_columns', None,
              'display.max_rows', None,
              'display.max_colwidth', None)



"""## stocks"""

def get_all_stock_info(ticker):
  # get all stock info

  info = ticker.info
  info_df = pd.DataFrame.from_dict([info])
  info_df_short = info_df[['symbol', 'shortName', 'exchange', 'quoteType', 'currency',
                           'previousClose', 'open', 'dayLow', 'dayHigh',
                          #  'category', 'navPrice',    # dc, don't know why this is failing?
                          #  'regularMarketPreviousClose', 'regularMarketOpen',
                          #  'regularMarketDayLow', 'regularMarketDayHigh',
                          #  'fiftyTwoWeekLow', 'fiftyTwoWeekHigh', 'fiftyDayAverage',
                          #  'regularMarketVolume',
                          #  'twoHundredDayAverage',
                          #  'trailingPE', 'volume',
                          #  'averageVolume', 'averageVolume10days',
                          #  'averageDailyVolume10Day', 'bid', 'ask', 'bidSize', 'askSize', 'yield',
                          #  'totalAssets', 'trailingAnnualDividendRate',
                          #  'trailingAnnualDividendYield',
                          #  'ytdReturn', 'beta3Year', 'fundFamily', 'fundInceptionDate',
                          #  'legalType', 'threeYearAverageReturn', 'fiveYearAverageReturn',
                          # 'underlyingSymbol',
                          #  'longName', 'firstTradeDateEpochUtc', 'timeZoneFullName',
                          #  'timeZoneShortName', 'uuid', 'messageBoardId', 'gmtOffSetMilliseconds',
                          #  'trailingPegRatio'
                            ]]
  info_df_short.reset_index(inplace=True)

  return info_df_short

def get_hist_info(ticker, period, interval):
  # get historical market data
  hist = ticker.history(period=period, interval=interval)
  return hist

def plot_stk_charts(df):
  sns.set(style="whitegrid")
  fig,axs = plt.subplots(3,2, figsize = (8,10))
  sns.histplot(data=df, x="Open", kde=True, color="skyblue", ax=axs[0, 0])
  sns.histplot(data=df, x="High", kde=True, color="olive", ax=axs[0, 1])
  sns.histplot(data=df, x="Low", kde=True, color="gold", ax=axs[1, 0])
  sns.histplot(data=df, x="Close", kde=True, color="teal", ax=axs[1, 1])
  sns.histplot(data=df, x="Volume", kde=True, color="teal", ax=axs[2, 0])
  sns.histplot(data=df, x="Dividends", kde=True, color="blue", ax=axs[2, 1])
  fig.tight_layout()
  return

def get_stk_news(ticker):
  # show news
  # print(stk)
  # print(stk.news)
  news_df = pd.DataFrame(ticker.news)

  # note the new way of creating column
  news_df = news_df.assign(providerPublishTime_n=lambda x: pd.to_datetime(x.providerPublishTime, unit='s'))

  display(news_df.info())

  news_df[['title',	'publisher',	'link',	'providerPublishTime_n',	'type'	,'relatedTickers']]

  return news_df

# https://coderzcolumn.com/tutorials/data-science/candlestick-chart-in-python-mplfinance-plotly-bokeh#2

def draw_candle_stick_chart(df):
  candlestick = go.Candlestick(
                            x=df.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
                            open=df['Open'],
                            high=df['High'],
                            low=df['Low'],
                            close=df['Close'],
                            #increasing_line_color= 'green', decreasing_line_color= 'red'
                            )


  fig = go.Figure(data=[candlestick])

  fig.update_layout(
      xaxis_rangeslider_visible=True,
      #width=800, height=600,
      title="NVDA, Today - Dec 2023",
      yaxis_title= symbol #'NVDA Stock'
  )
  fig.show()
  return

def draw_candle_stick_chart_ma(df):
  candlestick = go.Candlestick(
                            x=df.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
                            open=df['Open'],
                            high=df['High'],
                            low=df['Low'],
                            close=df['Close'],
                            #increasing_line_color= 'green', decreasing_line_color= 'red'
                            )
  sma = go.Scatter(x=df.index,
                  y=df["SMA"],
                  #yaxis="y1",
                  name="SMA",
                  fillcolor = 'black',

                  )
  ema_3day = go.Scatter(x=df.index,
                   y=df["EMA_3day"],
                   name="EMA_3day"
                  )

  ema = go.Scatter(x=df.index,
                   y=df["EMA"],
                   name="EMA"
                  )

  fig = go.Figure(data=[candlestick, sma, ema_3day, ema])

  # fig = go.Figure(data=[candlestick])

  fig.update_layout(
      xaxis_rangeslider_visible=True,
      #width=800, height=600,
      title="NVDA, Today - Dec 2023",
      yaxis_title= symbol #'NVDA Stock'
  )
  fig.show()
  return

def plot_stk_hist(df):
  print("plotting Data and Histogram")
  plt.figure(figsize=(12, 5))
  plt.plot(df.Close, color='green')
  plt.plot(df.Open, color='red')
  plt.ylabel("Counts")
  plt.xlabel("Date")

  return
# fig, ax = plt.subplots()
# msft_hist.hist(ax=ax)

def sparkline(df, col): #, Avg):
    fig = go.Figure()

    # Plot the Close price
    fig.add_trace(go.Scatter(x=df.index, y=df[col], line_color='blue', line_width=1))

    # # Plot the Avg line
    # fig.add_hline(y=ewm, line_color='indianred', line_width=1)

    # hide and lock down axes
    fig.update_xaxes(visible=False) #, fixedrange=True)
    fig.update_yaxes(visible=True, #fixedrange=True,
                     autorange=True,
                     anchor="free",
                     autoshift=True)

    # plt.ylim()

    # strip down the rest of the plot
    fig.update_layout(
        # template=TEMPLATE,
        width=250,
        height=80,
        showlegend=False,
        margin=dict(t=1,l=1,b=1,r=1)
    )

    # disable the modebar for such a small plot - fig.show commented out for debugging purposes
    # fig.show(config=dict(displayModeBar=False))

    # png = plotly.io.to_image(fig)

    # png_base64 = base64.b64encode(png).decode() #('ascii')
    png_base64 = base64.b64encode(fig.to_image()).decode('ascii')
    # display(png_base64)

    return '<img src="data:image/png;base64,{}"/>'.format(png_base64)



"""### Select Stock and Time interval"""

symbol_list = ['TSLA',
'NVDA',
'AMZN',
'NFLX',
'BA',
'GS',
'SPY',
'QQQ',
'IWM',
'SMH',
'RSP' ]

#         Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
# Either Use period parameter or use start and end
#     interval : str
#         Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
st.write("""
# Candlestick Charts

""",
         symbol_list)


period = "1mo"
interval= "1d"
ema_period1 = 5
ema_period2 = 10

# showing for just 1 ticker
# symbol = symbol_list[3]

# ticker = yf.Ticker(symbol) #initiate the ticker

# display ("Generating information for the selected stock :", symbol)

# """### Generate Ticker Information"""

# get_all_stock_info(ticker)

# get_stk_news(ticker)



# """#### Get new instance of the data"""

# ticker = yf.Ticker('SPY')
# df = get_all_stock_info(ticker)
# display (df.info())
# display (ticker.info)
# display (df.columns)

# df

# for symbol in symbol_list:
#   ticker = yf.Ticker(symbol)
#   display (ticker)
#   df = get_all_stock_info(ticker)
#   display (df)



# etf_info = pd.DataFrame()
# etf_info

# ticker.history(period='1y')[['Open', 'Close'] ]#

# https://www.quantstart.com/articles/candlestick-subplots-with-plotly-and-the-alphavantage-api/

etf_info = pd.DataFrame()
etf_data = {} # dictionary
for symbol in symbol_list:
    ticker = yf.Ticker(symbol)
    # df = get_all_stock_info(ticker)

    etf_data[symbol] = get_hist_info(ticker, period, interval)
    etf_info = pd.concat([get_all_stock_info(ticker), etf_info], ignore_index=True)

    # History data for 12 months
    history = ticker.history(period='1y')[['Open', 'Close']]
    # Convert the history series to a DF
    history_df = history #.to_frame()
    # display (ticker)
    # display (history_df.head(5))

    # Add the sparkline for 12 month Open history data
    etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Open'] = sparkline(history_df, 'Open')

    # Add the sparkline for 12 month Close history data
    etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Close'] = sparkline(history_df, 'Close')

etf_info = etf_info.drop(columns=['index']   )
st.write(etf_info)



# display (etf_info.head(1))
# display (etf_data)
# sparkline(history_df)

# etf_info.last_12_months_Open

# etf_info.last_12_months_Close

# HTML(etf_info.to_html(escape=False))

# st.write(HTML(etf_info.to_html(escape=False)))



# keys = etf_info.keys()
# print(keys)

# print (keys.mapping)

# df = pd.DataFrame.from_dict(etf_info) # , orient=['index','symbol'])
# df

# etf_info

# etf_info.get('SPY')

# etf_info_short = etf_info[[]]

# # # https://medium.com/@sugath.mudali/creating-a-simple-stock-portfolio-dashboard-in-python-702187bbe0d6
# # # Total units, group by Symbol
# # symbols = hist_df.groupby('Symbol')['Units'].sum()
# # # Drop any symbols when units are zero (we have sold them)
# # symbol_list= symbols.where(symbols > 0).dropna().index.to_list()

# # for symbol in symbol_list:
# #     units = hist_df.query("Symbol == @symbol")['Units'].sum()

# #     ticker = yf.Ticker(symbol)

# #     data['symbol'].append(ticker.info['symbol'])
# #     data['industry'].append(ticker.info['industry'])
# #     data['units'].append(units)
# #     current_price = ticker.info['currentPrice']
# #     data['current_price'].append(current_price)
# #     # Round to 2 decimal points
# #     market_value = round(units * current_price, 2)
# #     data['market_value'].append(market_value)

# #     # Prev close value to calculate day change
# #     prev_close = ticker.info['previousClose']
# #     day_change = (current_price - prev_close) * units
# #     data['day_change'].append(day_change)
# #     data['day_change_pct'].append(((current_price/prev_close) - 1) * 100)

# #     # History data for 12 months
# #     history = ticker.history(period='1y')['Close']

# #     # Convert the history series to a DF
# #     history_df = history.to_frame()
# #     # Average price we bought the stock (exclude sell transactions)
# #     t_df = hist_df.query("Symbol == @symbol & Units >= 0")[['Price', 'Units']]
# #     # Weighted average
# #     avg = round(np.average(a=t_df.Price, weights=t_df.Units))
# #     # Average weighted proice we have paid
# #     data['paid'].append(avg)
# #     cost = units * avg
# #     data['cost'].append(cost)

# #     data['gain_loss'].append(market_value - cost)
# #     data['gain_loss_pct'].append(((market_value/cost) - 1) * 100)

# #     # Add the sparkline for 12 month history data
# #     data['last_12_months'].append(sparkline(history_df, avg))

# # def sparkline(df, Avg):
# #     fig = go.Figure()

# #     # Plot the Close price
# #     fig.add_trace(go.Scatter(x=df.index, y=df['Close'], line_color='lightgreen', line_width=1))

# #     # Plot the Avg line
# #     fig.add_hline(y=Avg, line_color='indianred', line_width=1)

# #     # hide and lock down axes
# #     fig.update_xaxes(visible=False, fixedrange=True)
# #     fig.update_yaxes(visible=False, fixedrange=True)

# #     # strip down the rest of the plot
# #     fig.update_layout(
# #         template=TEMPLATE,
# #         width=250,
# #         height=40,
# #         showlegend=False,
# #         margin=dict(t=1,l=1,b=1,r=1)
# #     )

# #     # disable the modebar for such a small plot - fig.show commented out for debugging purposes
# #     # fig.show(config=dict(displayModeBar=False))

# #     png = plotly.io.to_image(fig)
# #     png_base64 = base64.b64encode(png).decode('ascii')

# #     return '<img src="data:image/png;base64,{}"/>'.format(png_base64)

# etf_data.keys()

# etf_info.keys()

# len(etf_data.items())

# import sys
# print("Size : " + str(sys.getsizeof(etf_data['SPY'])) + "bytes")



# # etf_data['SPY'].head()

# # etf_data['SPY'].tail()

# # df = get_hist_info(ticker, period, interval)
# # df = df.reset_index()

# # #ticker.history(period="5d", interval="15m")
# # display(df.info())
# # df.tail(10)

# # df = get_hist_info(ticker, period, interval)
# # df = df.reset_index()

# # #ticker.history(period="5d", interval="15m")
# # display(df.info())
# # df.tail(10)

# # df_hist = df.copy() #pd.DataFrame(df, columns=['Datetime', 'Close', 'High', 'Low', 'Open', 'Volume'])

# # df_hist.info()

# """#### Generate EMA"""

# # calculate_price_difference(df_hist)

# # df_hist['SMA'] = df_hist['Close'].rolling(20).mean()

# # df_hist['EMA_3day'] = df_hist['Close'].ewm(span=3, adjust=False).mean()

# # df_hist['EMA'] = df_hist['Close'].ewm(span=20, adjust=False).mean()
# # df_hist['EMA_5day'] = df_hist['Close'].ewm(span=5, adjust=False).mean()
# # df_hist['EMA_10day'] = df_hist['Close'].ewm(span=10, adjust=False).mean()


# # df_hist.tail(10)

# #print(df_close_ma.tail(10))

# # Parameters:
# #     period : str
# #         Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
# # Either Use period parameter or use start and end
# #     interval : str
# #         Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
# # Intraday data cannot extend last 60 days
# #     start: str
# #         Download start date string (YYYY-MM-DD) or _datetime, inclusive.
# # Default is 99 years ago
# # E.g. for start="2020-01-01", the first data point will be on "2020-01-01"
# #     end: str
# #         Download end date string (YYYY-MM-DD) or _datetime, exclusive.
# # Default is now
# # E.g. for end="2023-01-01", the last data point will be on "2022-12-31"
# #     prepost : bool
# #         Include Pre and Post market data in results?
# # Default is False
# #     auto_adjust: bool
# #         Adjust all OHLC automatically? Default is True
# #     back_adjust: bool
# #         Back-adjusted data to mimic true historical prices
# #     repair: bool
# #         Detect currency unit 100x mixups and attempt repair.
# # Default is False
# #     keepna: bool
# #         Keep NaN rows returned by Yahoo?
# # Default is False
# #     proxy: str
# #         Optional. Proxy server URL scheme. Default is None
# #     rounding: bool
# #         Round values to 2 decimal places?
# # Optional. Default is False = precision suggested by Yahoo!
# #     timeout: None or float
# #         If not None stops waiting for a response after given number of
# # seconds. (Can also be a fraction of a second e.g. 0.01)
# # Default is 10 seconds.
# #     debug: bool
# #         If passed as False, will suppress message printing to console.
# # DEPRECATED, will be removed in future version
# #     raise_errors: bool
# #         If True, then raise errors as Exceptions instead of logging.

# # If 5 period ema crosses over 10 period ema (note: ema not sma) then go long
# # If 5 period ema crosses under 10 period ema (note: ema not sma) then go short
# # Also the candle that is formed when cross happens should close above the high of the previous candle

# for etf in etf_data.keys():
#     etf_data[etf] = etf_data[etf].sort_index()
#     etf_data[etf]['EMA_p1'] = etf_data[etf]['Close'].ewm(span=ema_period1, adjust=False).mean()
#     etf_data[etf]['EMA_p2'] = etf_data[etf]['Close'].ewm(span=ema_period2, adjust=False).mean()
#     etf_data[etf]['Signal'] = 0.0

#     # If 5 period ema crosses over 10 period ema (note: ema not sma) then go long

#     etf_data[etf]['Signal'] = np.where(etf_data[etf]['EMA_p1'] > etf_data[etf]['EMA_p2'], 1.0, 0.0)

#     etf_data[etf]['Position'] = etf_data[etf]['Signal'].diff()
#     # display first few rows

# # view data for individual tickers
# etf_data['AMZN'].head()

# # view data for individual tickers
# # etf_data['AMZN']
# # etf_data['SPY'].head()

# # df_hist['EMA_p1'] = df_hist['Close'].ewm(span=ema_period1, adjust=False).mean()
# # df_hist['EMA_p2'] = df_hist['Close'].ewm(span=ema_period2, adjust=False).mean()

# # df_hist.tail(15)

# #  https://medium.com/towards-data-science/making-a-trade-call-using-simple-moving-average-sma-crossover-strategy-python-implementation-29963326da7a

# # df_hist['Signal'] = 0.0

# # # If 5 period ema crosses over 10 period ema (note: ema not sma) then go long

# # df_hist['Signal'] = np.where(df_hist['EMA_p1'] > df_hist['EMA_p2'], 1.0, 0.0)

# # df_hist['Position'] = df_hist['Signal'].diff()
# # # display first few rows
# # df_hist.head()

# # df_hist.Position.value_counts()

# # df_hist[df_hist['Position'] == -1]

# # df_hist

# # plt.figure(figsize = (20,10))
# # # plot close price, short-term and long-term moving averages
# # df_hist['Close'].plot(color = 'k', label= 'Close Price')
# # df_hist['EMA_p1'].plot(color = 'b',label = 'EMA_p1')
# # df_hist['EMA_p2'].plot(color = 'g', label = 'EMA_p2')
# # # plot ‘buy’ signals
# # plt.plot(df_hist[df_hist['Position'] == 1].index,
# #          df_hist['EMA_p1'][df_hist['Position'] == 1],
# #          '^', markersize = 15, color = 'g', label = 'buy')
# # # plot ‘sell’ signals
# # plt.plot(df_hist[df_hist['Position'] == -1].index,
# #          df_hist['EMA_p2'][df_hist['Position'] == -1],
# #          'v', markersize = 15, color = 'r', label = 'sell')
# # plt.ylabel('Price', fontsize = 15 )
# # plt.xlabel('Date', fontsize = 15 )
# # plt.title('Stock', fontsize = 20)
# # plt.legend()
# # plt.grid()
# # plt.show()

# # draw_candle_stick_chart(df_hist)

# # from plotly.subplots import make_subplots

# # fig = make_subplots(
# #     rows=6, cols=2,
# #     # specs=[[{"colspan": 2, 'secondary_y': True}, None],
# #     #        [{'secondary_y': True}, {'secondary_y': True},],
# #     #        [{'secondary_y': True}, {'secondary_y': True},],
# #     #        [{'secondary_y': True}, {'secondary_y': True},],
# #     #        [{'secondary_y': True}, {'secondary_y': True},],
# #     #        [{'secondary_y': True}, {'secondary_y': True},]],
# #     subplot_titles=(symbol_list),
# #     x_title="Date",
# #     y_title="OHLC"
# # )
# # fig.show()

# symbol_list

# N = 100000
# from plotly.subplots import make_subplots
# import plotly.graph_objects as go

# fig = make_subplots(
#     rows=4, cols=2, column_widths=[2,2],#row_heights=[9,9,9,9,9,9],

#     specs=[[{"colspan": 2, 'secondary_y': True}, None],
#            [{'secondary_y': True}, {'secondary_y': True}],
#           #  [{'secondary_y': True}, {'secondary_y': True}],
#           #  [{'secondary_y': True}, {'secondary_y': True}],
#            [{'secondary_y': True}, {'secondary_y': True}],
#            [{'secondary_y': True}, {'secondary_y': True}]],
#     subplot_titles=(symbol_list),
#     x_title="Date",
#     y_title="OHLC"
# )


# plot_symbols = symbol_list #['SPY', 'SPY', 'XLF', 'XLE', 'XLU', 'XLP']

# for i, etf in enumerate(plot_symbols):
#     if i == 1:
#         row = 1
#         col = 1
#     else:
#         row = (i//2)+1
#         col = (i%2)+1

#     fig.add_trace(
#         go.Candlestick(
#             x=etf_data[etf].index,
#             open=etf_data[etf]['Open'],
#             high=etf_data[etf]['High'],
#             low=etf_data[etf]['Low'],
#             close=etf_data[etf]['Close'],
#             name="OHLC"
#         ),
#         row=row, col=col
#     ),
#     fig.add_trace(
#         # plot 'buy' signals
#         go.Scattergl(x=etf_data[etf][etf_data[etf]['Position'] == 1].index,
#                           y=etf_data[etf]['EMA_p1'][etf_data[etf]['Position'] == 1],
#                           name="Buy",
#                           mode='markers',
#                           marker=dict(
#                               color=np.random.randn(N),
#                               colorscale='Viridis',
#                               line_width=1,
#                               symbol = 'triangle-up')
#                         ),
#         row = row, col = col
#     ),
#     fig.add_trace(
#         # plot 'sell' signals
#         go.Scattergl(x=etf_data[etf][etf_data[etf]['Position'] == -1].index,
#                           y=etf_data[etf]['EMA_p2'][etf_data[etf]['Position'] == -1],
#                           name = 'sell',
#                           mode='markers',
#                           marker=dict(
#                             color=np.random.randn(N),
#                             colorscale='tealrose',
#                             line_width=1,
#                             symbol = 'triangle-down',

#                             )
#                         ),
#         row = row, col = col
#     )
#     fig.update_layout(
#         showlegend=False,
#         title_text="OHLC data",
#         title_xref="paper",
#         title_x=0.4,
#         title_xanchor="center",
#         height=1200,
#         #width=600
#         )
#     fig.update_xaxes(rangeslider_visible=False)
# fig.show()
# # fig.print_grid()

# # N = 100000

# # for i, etf in enumerate(symbol_list):
# #     # if i == 1:
# #     #     row = 1
# #     #     col = 1
# #     # else:
# #     row = (i//2)+1
# #     col = (i%2)+1
# #     display(row, col)
# #     fig.add_trace(
# #         # add charting code
# #         candlestick = go.Candlestick(
# #                             x=etf_data[etf].index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
# #                             open=etf_data[etf]['Open'],
# #                             high=etf_data[etf]['High'],
# #                             low=etf_data[etf]['Low'],
# #                             close=etf_data[etf]['Close']

# #                             ),
# #         ema_p1 = go.Scatter(x=etf_data[etf].index,
# #                       y=etf_data[etf]["EMA_p1"],
# #                       name="EMA_p1",
# #                       fillcolor = 'azure'
# #                     ),

# #         ema_p2 = go.Scatter(x=etf_data[etf].index,
# #                           y=etf_data[etf]["EMA_p2"],
# #                           name="EMA_p2"
# #                         ),

# #         # plot 'buy' signals
# #         position_buy = go.Scattergl(x=etf_data[etf][etf_data[etf]['Position'] == 1].index,
# #                           y=etf_data[etf]['EMA_p1'][etf_data[etf]['Position'] == 1],
# #                           name="Buy",
# #                           mode='markers',
# #                           marker=dict(
# #                               color=np.random.randn(N),
# #                               colorscale='Viridis',
# #                               line_width=1,
# #                               symbol = 'triangle-up')
# #                         ),

# #         # plot 'sell' signals
# #         position_sell = go.Scattergl(x=etf_data[etf][etf_data[etf]['Position'] == -1].index,
# #                                   y=etf_data[etf]['EMA_p2'][etf_data[etf]['Position'] == -1],
# #                                   name = 'sell',
# #                                   mode='markers',
# #                                   marker=dict(
# #                                     color=np.random.randn(N),
# #                                     colorscale='sunset',
# #                                     line_width=1,
# #                                     symbol = 'triangle-down',
# #                                     # hovertext = etf_data[etf]['open','close','high','low']
# #                                     )
# #                                   ),

# #         fig = go.Figure(data=[candlestick, ema_p1, ema_p2
# #                               , position_buy, position_sell
# #                               ])
# #         # charting code ends
# #         ,
# #         row=row, col=col, secondary_y=True,
# #     )

# #     fig.layout.yaxis2.showgrid=False
# #     fig.update_layout(
# #         xaxis_rangeslider_visible=True,
# #         #width=800, height=600,
# #         # title= symbol #  "NVDA, Today - Dec 2023",
# #         yaxis_title= symbol #'NVDA Stock'
# #     )
# #     fig.update_xaxes(rangeslider_visible=False)
# # fig.show()

# # plot_symbols = symbol_list

# # for i, etf in enumerate(plot_symbols):
# #     if i == 1:
# #         row = 1
# #         col = 1
# #     else:
# #         row = (i//2)+1
# #         col = (i%2)+1
# #     print (row, col)
# #     fig = make_subplots(
# #         # rows=3, cols=2,
# #         specs=[[{"colspan": col, 'secondary_y': True}, None],
# #               [{'secondary_y': True}, {'secondary_y': True}],
# #               [{'secondary_y': True}, {'secondary_y': True}]],
# #         subplot_titles=(symbol_list),
# #         x_title="Date",
# #         y_title="OHLC"
# #     )
# #     fig.add_trace(
# #         go.Candlestick(
# #             x=etf_data[etf].index,
# #             open=etf_data[etf]['Open'],
# #             high=etf_data[etf]['High'],
# #             low=etf_data[etf]['Low'],
# #             close=etf_data[etf]['Close'],
# #             name="OHLC"
# #         ),
# #         row=row, col=col
# #     )
# #     # fig.add_trace(
# #     #     go.Bar(
# #     #         x=etf_data_mask[etf].index,
# #     #         y=etf_data_mask[etf]['volume'],
# #     #         opacity=0.1,
# #     #         marker_color='blue',
# #     #         name="volume"
# #     #     ),
# #     #     row=row, col=col, secondary_y=True,
# #     # )
# #     # fig.add_trace(
# #     #     go.Scatter(
# #     #         x=etf_data_mask[etf].index,
# #     #         y=etf_data_mask[etf].MA5,
# #     #         line=dict(color='black', width=1),
# #     #         name="5 day MA",
# #     #         yaxis="y2"
# #     #     ),
# #     #     row=row, col=col, secondary_y=False,
# #     # )
# #     fig.layout.yaxis2.showgrid=False
# #     fig.update_layout(
# #         showlegend=False,
# #         # title_text="OHLC data for SPY, XLF, XLE, XLU and XLP",
# #         title_xref="paper",
# #         title_x=0.5,
# #         title_xanchor="center")
# #     fig.update_xaxes(rangeslider_visible=False)
# # fig.show()

# # df_hist.columns

# # # https://plotly.com/python/reference/scattergl/

# # candlestick = go.Candlestick(
# #                             x=df_hist.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
# #                             open=df_hist['Open'],
# #                             high=df_hist['High'],
# #                             low=df_hist['Low'],
# #                             close=df_hist['Close'],
# #                             #increasing_line_color= 'green', decreasing_line_color= 'red'8
# #                             )

# # ema_5day = go.Scatter(x=df_hist.index,
# #                   y=df_hist["EMA_p1"],
# #                   name="EMA_p1",
# #                       fillcolor = 'azure'
# #                 )

# # ema_10day = go.Scatter(x=df_hist.index,
# #                   y=df_hist["EMA_p2"],
# #                   name="EMA_p2"
# #                 )

# # # plot 'buy' signals
# # N = 100000
# # position_buy = go.Scattergl(x=df_hist[df_hist['Position'] == 1].index,
# #                   y=df_hist['EMA_p1'][df_hist['Position'] == 1],
# #                   name="Buy",
# #                   mode='markers',
# #                   marker=dict(
# #                       color=np.random.randn(N),
# #                       colorscale='tropic',
# #                       line_width=1,
# #                       symbol = 'triangle-up',
# #                       size = 15
# #                       )
# #                 )

# # # plot 'sell' signals
# # position_sell = go.Scattergl(x=df_hist[df_hist['Position'] == -1].index,
# #                            y=df_hist['EMA_p2'][df_hist['Position'] == -1],
# #                            name = 'sell',
# #                            mode='markers',
# #                            marker=dict(
# #                             color= np.random.randn(N+1000),
# #                             colorscale='armyrose',
# #                             line_width=1,
# #                             symbol = 'triangle-down',
# #                             size = 15
# #                             # hovertext = df_hist['Open','Close','High','Low']
# #                             )
# #                            )

# # # # plot ‘buy’ signals
# # # plt.plot(df_hist[df_hist['Position'] == 1].index,
# # #          df_hist['EMA_p1'][df_hist['Position'] == 1],
# # #          '^', markersize = 15, color = 'g', label = 'buy')
# # # # plot ‘sell’ signals
# # # plt.plot(df_hist[df_hist['Position'] == -1].index,
# # #          df_hist['EMA_p2'][df_hist['Position'] == -1],
# # #          'v', markersize = 15, color = 'r', label = 'sell')

# # # # plot 'buy' signals
# # # position_buy = go.Scatter(x=df_hist[df_hist['Position'] == 1].index,
# # #          df_hist['EMA_5day'][df_hist['Position'] == 1],
# # #          '^', markersize = 15, color = 'c', label = 'buy')

# # # # plot 'sell' signals
# # # position_sell = go.Scatter(df_hist[df_hist['Position'] == -1].index,
# # #          df_hist['EMA_10day'][df_hist['Position'] == -1],
# # #          'v', markersize = 15, color = 'k', label = 'sell')

# # fig = go.Figure(data=[candlestick, ema_5day, ema_10day
# #                        , position_buy, position_sell
# #                       ])

# # # fig = go.Figure(data=[candlestick])
# # display ("Charting for: ", symbol)
# # fig.update_layout(
# #     xaxis_rangeslider_visible=True,
# #     #width=800, height=600,
# #     # title= symbol #  "NVDA, Today - Dec 2023",
# #     yaxis_title= symbol #'NVDA Stock'
# # )
# # fig.show()

# # # One of the following named colorscales:
# # #             ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',
# # #              'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',
# # #              'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',
# # #              'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',
# # #              'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',
# # #              'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',
# # #              'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',
# # #              'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',
# # #              'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',
# # #              'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',
# # #              'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',
# # #              'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',
# # #              'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
# # #              'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
# # #              'ylorrd'].

# # def plot_ticker():
# #   candlestick = go.Candlestick(
# #                             x=df_hist.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
# #                             open=df_hist['Open'],
# #                             high=df_hist['High'],
# #                             low=df_hist['Low'],
# #                             close=df_hist['Close'],
# #                             #increasing_line_color= 'green', decreasing_line_color= 'red'8
# #                             )

# #   ema_5day = go.Scatter(x=df_hist.index,
# #                     y=df_hist["EMA_p1"],
# #                     name="EMA_p1",
# #                         fillcolor = 'azure'
# #                   )

# #   ema_10day = go.Scatter(x=df_hist.index,
# #                     y=df_hist["EMA_p2"],
# #                     name="EMA_p2"
# #                   )

# #   # plot 'buy' signals
# #   N = 100000
# #   position_buy = go.Scattergl(x=df_hist[df_hist['Position'] == 1].index,
# #                     y=df_hist['EMA_p1'][df_hist['Position'] == 1],
# #                     name="Buy",
# #                     mode='markers',
# #                     marker=dict(
# #                         color=np.random.randn(N),
# #                         colorscale='tropic',
# #                         line_width=1,
# #                         symbol = 'triangle-up',
# #                         size = 15
# #                         )
# #                   )

# #   # plot 'sell' signals
# #   position_sell = go.Scattergl(x=df_hist[df_hist['Position'] == -1].index,
# #                             y=df_hist['EMA_p2'][df_hist['Position'] == -1],
# #                             name = 'sell',
# #                             mode='markers',
# #                             marker=dict(
# #                               color= np.random.randn(N+1000),
# #                               colorscale='armyrose',
# #                               line_width=1,
# #                               symbol = 'triangle-down',
# #                               size = 15
# #                               # hovertext = df_hist['Open','Close','High','Low']
# #                               )
# #                             )

# #   # # plot ‘buy’ signals
# #   # plt.plot(df_hist[df_hist['Position'] == 1].index,
# #   #          df_hist['EMA_p1'][df_hist['Position'] == 1],
# #   #          '^', markersize = 15, color = 'g', label = 'buy')
# #   # # plot ‘sell’ signals
# #   # plt.plot(df_hist[df_hist['Position'] == -1].index,
# #   #          df_hist['EMA_p2'][df_hist['Position'] == -1],
# #   #          'v', markersize = 15, color = 'r', label = 'sell')

# #   # # plot 'buy' signals
# #   # position_buy = go.Scatter(x=df_hist[df_hist['Position'] == 1].index,
# #   #          df_hist['EMA_5day'][df_hist['Position'] == 1],
# #   #          '^', markersize = 15, color = 'c', label = 'buy')

# #   # # plot 'sell' signals
# #   # position_sell = go.Scatter(df_hist[df_hist['Position'] == -1].index,
# #   #          df_hist['EMA_10day'][df_hist['Position'] == -1],
# #   #          'v', markersize = 15, color = 'k', label = 'sell')

# #   fig = go.Figure(data=[candlestick, ema_5day, ema_10day
# #                         , position_buy, position_sell
# #                         ])

# #   # fig = go.Figure(data=[candlestick])
# #   display ("Charting for: ", symbol)
# #   fig.update_layout(
# #       xaxis_rangeslider_visible=True,
# #       #width=800, height=600,
# #       # title= symbol #  "NVDA, Today - Dec 2023",
# #       yaxis_title= symbol #'NVDA Stock'
# #   )
# #   #fig.show()
# #   return fig

# plot_ticker()



# """- create app app.con.com
# - login screen
# - end of day basis
# - pick a few algos eg 5-10 crossover
# > identify the algos (chat)
# - run the same algo on a set of stocks (eg 50 stocks)
# - execute the logic
# - display page - listing the stocks that can be used
# - esg norms
# """





# """- mplfinance (Built on top of Matplotlib)

# The first library which we'll explore for plotting candlestick charts in Python is mplfinance. It used to be available as a matplotlib module earlier but now it has moved out and has become an independent library. We can generate static candlestick charts using it.

# - Plotly
# Plotly is another Python library that provides functionality to create candlestick charts. It allows us to create interactive candlestick charts.

# - Cufflinks
# The fifth library that we'll use to explain how we can create a candlestick chart using Python is cufflinks. Cufflinks is a wrapper library around plotly & pandas and let us create plotly charts directly from the pandas dataframe with just one line of code. As cufflinks is based on plotly, all charts are interactive.

# """

# # We can only create a candlestick chart without a range slider as well by setting the value of parameter xaxis_rangeslider_visible as False.

# # candlestick = go.Candlestick(
# #                             x=df_hist.index,
# #                             open=df_hist['Open'],
# #                             high=df_hist['High'],
# #                             low=df_hist['Low'],
# #                             close=df_hist['Close'],
# #                             #increasing_line_color= 'green', decreasing_line_color= 'red'
# #                             )
# # sma = go.Scatter(x=df_hist.index,
# #                  y=df_hist["SMA"],
# #                  yaxis="y1",
# #                  name="SMA"
# #                 )
# # # ema = go.Scatter(x=df_hist.index,
# # #                  y=df_hist["EMA"],
# # #                  name="EMA"
# # #                 )

# # fig = go.Figure(data=[candlestick, sma]) #, ema])

# # #fig = go.Figure(data=[candlestick])

# # fig.update_layout(
# #     xaxis_rangeslider_visible=True,
# #     #width=800, height=600,
# #     title="NVDA, Today - Dec 2023",
# #     yaxis_title= symbol #'NVDA Stock'
# # )
# # fig.show()

# # draw_candle_stick_chart_ma(df_hist)



























# # import numpy as np
# # import pandas as pd
# # from matplotlib.figure import Figure

# # data_url = "https://cdn.jsdelivr.net/gh/holoviz/panel@master/examples/assets/occupancy.csv"
# # data = pd.read_csv(data_url, parse_dates=["date"]).set_index("date")

# # primary_color = "#0072B5"
# # secondary_color = "#94EA84"


# # def mpl_plot(avg, highlight):
# #     fig = Figure(figsize=(10,5))
# #     ax = fig.add_subplot()
# #     avg.plot(ax=ax, c=primary_color)
# #     if len(highlight):
# #         highlight.plot(style="o", ax=ax, c=secondary_color)
# #     return fig


# # def find_outliers(variable="Temperature", window=20, sigma=10, view_fn=mpl_plot):
# #     avg = data[variable].rolling(window=window).mean()
# #     residual = data[variable] - avg
# #     std = residual.rolling(window=window).std()
# #     outliers = np.abs(residual) > std * sigma
# #     return view_fn(avg, avg[outliers])


# # # Panel
# # import panel as pn

# # pn.extension(sizing_mode="stretch_width", template="fast")

# # # Define labels and widgets
# # pn.pane.Markdown("Variable").servable(area="sidebar")
# # variable = pn.widgets.RadioBoxGroup(
# #     name="Variable", value="Temperature", options=list(data.columns), margin=(-10, 5, 10, 10)
# # ).servable(area="sidebar")
# # window = pn.widgets.IntSlider(name="Window", value=20, start=1, end=60).servable(area="sidebar")

# # # Make your functions interactive, i.e. react to changes in widget values
# # ifind_outliers = pn.bind(find_outliers, variable, window, 10)

# # # Layout the interactive functions
# # pn.panel(ifind_outliers, sizing_mode="scale_both").servable()

# # # Configure the template
# # pn.state.template.param.update(
# #     site="Panel", title="Getting Started Example",
# #     accent_base_color=primary_color, header_background=primary_color,
# # )



# """### Setup Panel Dashboard"""



# """## Data Import"""

# # import pandas as pd
# # import numpy as np
# # from matplotlib.figure import Figure

# # data_url = "https://cdn.jsdelivr.net/gh/holoviz/panel@master/examples/assets/occupancy.csv"
# # data = pd.read_csv(data_url, parse_dates=["date"]).set_index("date")
# # data.head()

# """# Data Visualization

# For simplicity we will be using Matplotlib. But you can use any of your favorite plotting libraries.
# """

# # import numpy as np
# # from matplotlib.figure import Figure
# # df_hist.head()

# primary_color = "#0072B5"
# secondary_color = "#94EA84"

# # def mpl_plot(avg, highlight):
# #     fig = Figure()
# #     ax = fig.add_subplot()
# #     avg.plot(ax=ax, c=primary_color)
# #     if len(highlight):
# #         highlight.plot(style="o", ax=ax, c=secondary_color)
# #     return fig

# # def find_outliers(variable="Temperature", window=20, sigma=10, view_fn=mpl_plot):
# #     avg = data[variable].rolling(window=window).mean()
# #     residual = data[variable] - avg
# #     std = residual.rolling(window=window).std()
# #     outliers = np.abs(residual) > std * sigma
# #     return view_fn(avg, avg[outliers])

# # find_outliers()

# """## Data Exploration

# Panel can also help you with **interactive data exploration**.
# """

# import panel as pn

# pn.extension(sizing_mode="stretch_width", comms='colab')
# pn.extension('plotly')

# # # Widgets
# # variable = pn.widgets.RadioBoxGroup(
# #     name="Variable", value="Temperature", options=list(data.columns), margin=(-10, 5, 10, 10)
# # )
# # window = pn.widgets.IntSlider(name="Window", value=20, start=1, end=60)

# # # Reactive Functions
# # reactive_outliers = pn.bind(find_outliers, variable, window, 10)

# # # Layouts
# # settings = pn.Column(pn.pane.Markdown("Variable"), variable) #, window)
# # pn.Row(pn.WidgetBox(settings, sizing_mode="fixed",
# #                     #background="#1e1e1e",
# #                     margin=20), reactive_outliers)



# # # Widgets
# # variable = pn.widgets.RadioBoxGroup(
# #     name="Variable", value="Open", options=list(df_hist.columns), margin=(-10, 5, 10, 10)
# # )
# # # window = pn.widgets.IntSlider(name="Window", value=20, start=1, end=60)
# # bound_plot = pn.bind(plot_ticker)

# etf_data.keys()

# # Widgets
# # radio button
# variable = pn.widgets.RadioBoxGroup(
#     name="Variable", value="", options=list(etf_data.keys()), margin=(10, 5, 10, 10)
# )

# # dataframe
# # df_widget = pn.widgets.DataFrame(df_hist, name='DataFrame')

# # df_widget

# variable

# variable.value

# # candlestick = go.Candlestick(
# #                             x=df_hist.index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
# #                             open=df_hist['Open'],
# #                             high=df_hist['High'],
# #                             low=df_hist['Low'],
# #                             close=df_hist['Close'],
# #                             #increasing_line_color= 'green', decreasing_line_color= 'red'8
# #                             )

# # ema_5day = go.Scatter(x=df_hist.index,
# #                   y=df_hist["EMA_p1"],
# #                   name="EMA_p1",
# #                       fillcolor = 'azure'
# #                 )

# # ema_10day = go.Scatter(x=df_hist.index,
# #                   y=df_hist["EMA_p2"],
# #                   name="EMA_p2"
# #                 )

# # # plot 'buy' signals
# # N = 100000
# # position_buy = go.Scattergl(x=df_hist[df_hist['Position'] == 1].index,
# #                   y=df_hist['EMA_p1'][df_hist['Position'] == 1],
# #                   name="Buy",
# #                   mode='markers',
# #                   marker=dict(
# #                       color=np.random.randn(N),
# #                       colorscale='tropic',
# #                       line_width=1,
# #                       symbol = 'triangle-up',
# #                       size = 15
# #                       )
# #                 )

# # # plot 'sell' signals
# # position_sell = go.Scattergl(x=df_hist[df_hist['Position'] == -1].index,
# #                            y=df_hist['EMA_p2'][df_hist['Position'] == -1],
# #                            name = 'sell',
# #                            mode='markers',
# #                            marker=dict(
# #                             color= np.random.randn(N+1000),
# #                             colorscale='armyrose',
# #                             line_width=1,
# #                             symbol = 'triangle-down',
# #                             size = 15
# #                             # hovertext = df_hist['Open','Close','High','Low']
# #                             )
# #                            )

# # # # plot ‘buy’ signals
# # # plt.plot(df_hist[df_hist['Position'] == 1].index,
# # #          df_hist['EMA_p1'][df_hist['Position'] == 1],
# # #          '^', markersize = 15, color = 'g', label = 'buy')
# # # # plot ‘sell’ signals
# # # plt.plot(df_hist[df_hist['Position'] == -1].index,
# # #          df_hist['EMA_p2'][df_hist['Position'] == -1],
# # #          'v', markersize = 15, color = 'r', label = 'sell')

# # # # plot 'buy' signals
# # # position_buy = go.Scatter(x=df_hist[df_hist['Position'] == 1].index,
# # #          df_hist['EMA_5day'][df_hist['Position'] == 1],
# # #          '^', markersize = 15, color = 'c', label = 'buy')

# # # # plot 'sell' signals
# # # position_sell = go.Scatter(df_hist[df_hist['Position'] == -1].index,
# # #          df_hist['EMA_10day'][df_hist['Position'] == -1],
# # #          'v', markersize = 15, color = 'k', label = 'sell')

# # fig = go.Figure(data=[candlestick, ema_5day, ema_10day
# #                        , position_buy, position_sell
# #                       ])

# # # fig = go.Figure(data=[candlestick])
# # display ("Charting for: ", symbol)
# # fig.update_layout(
# #     xaxis_rangeslider_visible=True,
# #     #width=800, height=600,
# #     # title= symbol #  "NVDA, Today - Dec 2023",
# #     yaxis_title= symbol #'NVDA Stock'
# # )
# # # fig.show()
# # # fig = plt.gcf()

# # # plt.close(fig)

# # plot_widget = pn.pane.Plotly(fig)

# # plot_widget

# for symbol in symbol_list:
#     # ticker = yf.Ticker(symbol)
#     # etf_data[symbol] = get_hist_info(ticker, period, interval)

#     candlestick = go.Candlestick(
#                                 x=etf_data[symbol].index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
#                                 open=etf_data[symbol]['Open'],
#                                 high=etf_data[symbol]['High'],
#                                 low=etf_data[symbol]['Low'],
#                                 close=etf_data[symbol]['Close'],
#                                 #increasing_line_color= 'green', decreasing_line_color= 'red'8
#                                 )

#     ema_5day = go.Scatter(x=etf_data[symbol].index,
#                       y=etf_data[symbol]["EMA_p1"],
#                       name="EMA_p1",
#                           fillcolor = 'azure'
#                     )

#     ema_10day = go.Scatter(x=etf_data[symbol].index,
#                       y=etf_data[symbol]["EMA_p2"],
#                       name="EMA_p2"
#                     )

#     # plot 'buy' signals
#     N = 100000
#     position_buy = go.Scattergl(x=etf_data[symbol][etf_data[symbol]['Position'] == 1].index,
#                       y=etf_data[symbol]['EMA_p1'][etf_data[symbol]['Position'] == 1],
#                       name="Buy",
#                       mode='markers',
#                       marker=dict(
#                           color=np.random.randn(N),
#                           colorscale='tropic',
#                           line_width=1,
#                           symbol = 'triangle-up',
#                           size = 15
#                           )
#                     )

#     # plot 'sell' signals
#     position_sell = go.Scattergl(x=etf_data[symbol][etf_data[symbol]['Position'] == -1].index,
#                               y=etf_data[symbol]['EMA_p2'][etf_data[symbol]['Position'] == -1],
#                               name = 'sell',
#                               mode='markers',
#                               marker=dict(
#                                 color= np.random.randn(N+1000),
#                                 colorscale='armyrose',
#                                 line_width=1,
#                                 symbol = 'triangle-down',
#                                 size = 15
#                                 # hovertext = df_hist['Open','Close','High','Low']
#                                 )
#                               )

#     # # plot ‘buy’ signals
#     # plt.plot(df_hist[df_hist['Position'] == 1].index,
#     #          df_hist['EMA_p1'][df_hist['Position'] == 1],
#     #          '^', markersize = 15, color = 'g', label = 'buy')
#     # # plot ‘sell’ signals
#     # plt.plot(df_hist[df_hist['Position'] == -1].index,
#     #          df_hist['EMA_p2'][df_hist['Position'] == -1],
#     #          'v', markersize = 15, color = 'r', label = 'sell')

#     # # plot 'buy' signals
#     # position_buy = go.Scatter(x=df_hist[df_hist['Position'] == 1].index,
#     #          df_hist['EMA_5day'][df_hist['Position'] == 1],
#     #          '^', markersize = 15, color = 'c', label = 'buy')

#     # # plot 'sell' signals
#     # position_sell = go.Scatter(df_hist[df_hist['Position'] == -1].index,
#     #          df_hist['EMA_10day'][df_hist['Position'] == -1],
#     #          'v', markersize = 15, color = 'k', label = 'sell')

#     fig = go.Figure(data=[candlestick, ema_5day, ema_10day
#                           , position_buy, position_sell
#                           ])

#     # fig = go.Figure(data=[candlestick])
#     display ("Charting for: ", symbol)
#     fig.update_layout(
#         xaxis_rangeslider_visible=True,
#         #width=800, height=600,
#         # title= symbol #  "NVDA, Today - Dec 2023",
#         yaxis_title= symbol #'NVDA Stock'
#     )
# # fig.show()
# # fig = plt.gcf()

# # plt.close(fig)

# plot_widget = pn.pane.Plotly(fig)

# plot_widget

# def plot_ticker(symbol):
#     # ticker = yf.Ticker(symbol)
#     # etf_data[symbol] = get_hist_info(ticker, period, interval)

#     candlestick = go.Candlestick(
#                                 x=etf_data[symbol].index,       # choosing the Datetime column for the x-axis disrupts the graph to show the gaps
#                                 open=etf_data[symbol]['Open'],
#                                 high=etf_data[symbol]['High'],
#                                 low=etf_data[symbol]['Low'],
#                                 close=etf_data[symbol]['Close'],
#                                 #increasing_line_color= 'green', decreasing_line_color= 'red'8
#                                 )

#     ema_5day = go.Scatter(x=etf_data[symbol].index,
#                       y=etf_data[symbol]["EMA_p1"],
#                       name="EMA_p1",
#                           fillcolor = 'azure'
#                     )

#     ema_10day = go.Scatter(x=etf_data[symbol].index,
#                       y=etf_data[symbol]["EMA_p2"],
#                       name="EMA_p2"
#                     )

#     # plot 'buy' signals
#     N = 100000
#     position_buy = go.Scattergl(x=etf_data[symbol][etf_data[symbol]['Position'] == 1].index,
#                       y=etf_data[symbol]['EMA_p1'][etf_data[symbol]['Position'] == 1],
#                       name="Buy",
#                       mode='markers',
#                       marker=dict(
#                           color=np.random.randn(N),
#                           colorscale='tropic',
#                           line_width=1,
#                           symbol = 'triangle-up',
#                           size = 15
#                           )
#                     )

#     # plot 'sell' signals
#     position_sell = go.Scattergl(x=etf_data[symbol][etf_data[symbol]['Position'] == -1].index,
#                               y=etf_data[symbol]['EMA_p2'][etf_data[symbol]['Position'] == -1],
#                               name = 'sell',
#                               mode='markers',
#                               marker=dict(
#                                 color= np.random.randn(N+1000),
#                                 colorscale='armyrose',
#                                 line_width=1,
#                                 symbol = 'triangle-down',
#                                 size = 15
#                                 # hovertext = df_hist['Open','Close','High','Low']
#                                 )
#                               )

#     # # plot ‘buy’ signals
#     # plt.plot(df_hist[df_hist['Position'] == 1].index,
#     #          df_hist['EMA_p1'][df_hist['Position'] == 1],
#     #          '^', markersize = 15, color = 'g', label = 'buy')
#     # # plot ‘sell’ signals
#     # plt.plot(df_hist[df_hist['Position'] == -1].index,
#     #          df_hist['EMA_p2'][df_hist['Position'] == -1],
#     #          'v', markersize = 15, color = 'r', label = 'sell')

#     # # plot 'buy' signals
#     # position_buy = go.Scatter(x=df_hist[df_hist['Position'] == 1].index,
#     #          df_hist['EMA_5day'][df_hist['Position'] == 1],
#     #          '^', markersize = 15, color = 'c', label = 'buy')

#     # # plot 'sell' signals
#     # position_sell = go.Scatter(df_hist[df_hist['Position'] == -1].index,
#     #          df_hist['EMA_10day'][df_hist['Position'] == -1],
#     #          'v', markersize = 15, color = 'k', label = 'sell')

#     fig = go.Figure(data=[candlestick, ema_5day, ema_10day
#                           , position_buy, position_sell
#                           ])

#     # fig = go.Figure(data=[candlestick])
#     display ("Charting for: ", symbol)
#     fig.update_layout(
#         xaxis_rangeslider_visible=True,
#         #width=800, height=600,
#         # title= symbol #  "NVDA, Today - Dec 2023",
#         yaxis_title= symbol #'NVDA Stock'
#     )
# # fig.show()
# # fig = plt.gcf()

# # plt.close(fig)

#     plot_widget = pn.pane.Plotly(fig)
#     return plot_widget

# plot_widget

# plot_ticker('AMZN')

# plot_ticker('SPY')

# variable

# variable.value

# first_app = pn.Column(variable,
#                       (variable.value),
#                       # df_widget
#                       )

# first_app.servable()







# # Layouts
# settings = pn.Column(pn.pane.Markdown("Variable"), variable) #, window)
# pn.Row(pn.WidgetBox(settings, sizing_mode="fixed",
#                     # background="#1e1e1e",
#                     margin=20)
#                   #  , plot_ticker(variable.value)
#        )

# pn.Row(pn.WidgetBox(plot_ticker(variable.value),
#                     sizing_mode="fixed",
#                     # background="#1e1e1e",
#                     margin=20)

#        )

# radio_group = pn.widgets.RadioBoxGroup(name='RadioBoxGroup', options=['Biology', 'Chemistry', 'Physics'], inline=True)

# radio_group

# pn.Row(pn.WidgetBox(sizing_mode="fixed",
#                     # background="#1e1e1e",
#                     margin=20,
#                     plot_widget(variable.value),
#        )
# )

# # # Reactive Functions
# # reactive_outliers = pn.bind(find_outliers, variable, window, 10)

# """## Layout the App"""

# template = pn.template.FastListTemplate(
#     site="Panel",
#     title="Getting Started Example",
#     sidebar=[settings],
#     main=[plot_widget],
#     # accent_base_color=primary_color,
#     # header_background=primary_color,
# )

# """## Share the app"""

# pn.serve

# server=pn.serve({"": template}, port=80, address="127.0.0.1",
#                 # threaded=True,
#                 # websocket_origin="127.0.0.1:80",
#                 # allow_reuse_address=True,
#                 start = True,
#                 show = True,

#                 )

# server.stop()

# server.start()

# !curl http://127.0.0.2:80

# # !pip install pyngrok --quiet
# # from pyngrok import ngrok

# # # Terminate open tunnels if exist
# # ngrok.kill()

# # # Setting the authtoken (optional)
# # # Get your authtoken from https://dashboard.ngrok.com/auth
# # NGROK_AUTH_TOKEN = "7RYYB32LEGDKIYFQX2VZKUDZVOIW7JMI"
# # ngrok.set_auth_token(NGROK_AUTH_TOKEN)

# # # Open an HTTPs tunnel on port 80 for http://localhost:80
# # public_url = ngrok.connect(addr="80")
# # print("Tracking URL:", public_url)

# server.stop()

# !curl http://d92d-35-236-212-147.ngrok.io

# """## Learn more

# To get started with Panel check out the [Panel Getting Started Guide](https://panel.holoviz.org/getting_started/index.html). To get or provide help check out the [community forum](https://discourse.holoviz.org/). For more inspiration check out my site [awesome-panel.org](https://awesome-panel.org).

# ## Support us

# If you want to support us please give us a ⭐ on Github ([Panel](https://github.com/holoviz/panel), [Awesome-Panel](https://github.com/marcskovmadsen/awesome-panel)).
# """

# # https://medium.com/@sugath.mudali/creating-a-simple-stock-portfolio-dashboard-in-python-702187bbe0d6

# # with streamlit
# # https://medium.com/@cameronjosephjones/building-a-stock-price-dashboard-with-streamlit-python-and-apis-bc57011758d4