# -*- coding: utf-8 -*-
"""AlgoTrading_v3.2_panel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MuK4_G2Nf8oow21NW_a3pHg_35JgVSI
"""
from algotrading_helper import *
pd.options.display.float_format = '${:,.2f}'.format

def main():
      
  # """### Select Stock and Time interval"""
  # https://github.com/smudali/stocks-analysis/blob/main/dasboard/01Home.py
  symbol_list = ["TATAMOTORS.NS","PLTR","TSLA","NVDA","AMZN", "NFLX","BA","GS","SPY","QQQ","IWM","SMH","RSP"]

  # ticker selection
  st.sidebar.header("Choose your Stock filter: ")
  ticker = st.sidebar.multiselect('Choose Ticker', options=symbol_list,
                                help = 'Select a ticker', 
                                key='ticker',
                                max_selections=8,
                                default= ["TSLA"]
                                )
  
  # period selection
  selected_period = st.sidebar.selectbox(
      'Select Period', options=['1d','5d','1mo','3mo', '6mo', 'YTD', '1y', 'all'], index=1)
  
  # interval selection
  selected_interval = st.sidebar.selectbox(
      'Select Intervals', options=['1m','2m','5m','15m','30m','60m','90m','1h','1d','5d','1wk','1mo','3mo'], index=2)
  
  # trading strategy selection
  algo_strategy = st.sidebar.selectbox(
      'Select Moving Average Strategy', options=['SMA', 'EMA'], index=1)
  selected_short_window =  st.sidebar.number_input(":gray[Short Window]", step = 1, value=5)  
  selected_long_window =  st.sidebar.number_input(":gray[Long Window]", step = 1, value=8)   

  #         Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
  # Either Use period parameter or use start and end
  #     interval : str
  #         Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo

  ema_period1 = selected_short_window
  ema_period2 = selected_long_window

  known_options = ticker 
  print(known_options)
  
  # print(show_snapshot(known_options))
  
  if len(known_options) == 0:
    st.write ("Please select a ticker in the sidebar")
    return
  else:
    tab = st.tabs(["Summary","🗃 List View","📈 Visualisations", "🗃 Details"])
    # ###################################################
    # Summary: 
    # # of stocks being watched; 
    # Algo being used
    # # of winining vs losing trades
    # # best stocks
    # ###################################################
    with tab[0]:    
      # creates the container for page title
      dash_1 = st.container()

      with dash_1:
          st.markdown("<h3 style='text-align: center;'>You are watching</h3>", unsafe_allow_html=True)
          st.write("")
          
          # get basics
          selected_stocks = len(known_options) 

          col1, col2, col3, col4 = st.columns(4)
          # create column span
          col1.metric(label="No. Stocks Watch", value= selected_stocks , delta=None)
          col2.metric(label="Period", value= selected_period , delta=None)
          col3.metric(label="Interval", value= selected_interval , delta=None)
          # trading_strategy = str(algo_strategy) + '_' + str(selected_short_window) + '_' + str(selected_long_window) + '_crossover'
          col4.metric(label="Trading Strategy", value= algo_strategy , delta=None)
        
      st.divider()
       
      dash_2 = st.container()
      with dash_2:
        
          title = "Moving Average Strategy: " + algo_strategy
          st.subheader(title)
          st.divider()
          
          # Collate high level stats on the data
          quick_explore = {}
          
          quick_explore_df = pd.DataFrame()      
          for symbol in known_options:
              # st.subheader(symbol)
              stock_name =  symbol
              yf_data = yf.Ticker(symbol) #initiate the ticker
              stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
              stock_df, df_pos = MovingAverageCrossStrategy(symbol,
                                        stock_hist_df,
                                        selected_short_window,
                                        selected_long_window,
                                        algo_strategy,
                                        True)
              
              # print("stock_df, df_pos")
              # print(stock_df, df_pos)
              stock_day_close = get_current_price(symbol, selected_period, selected_interval)
              stock_price_at_trigger = df_pos.loc[df_pos.index == df_pos.index.max(), "Close"].to_list()[0]
              stock_trigger_at = df_pos.index.max()
              stock_trigger_state = df_pos.loc[df_pos.index == df_pos.index.max(), "Position"].to_list()[0]
              
              for variable in ["symbol",
                              "stock_day_close",
                              "stock_price_at_trigger",
                              "stock_trigger_state",
                              "stock_trigger_at"
                              ]:
                quick_explore[variable] = eval(variable)
              # print(quick_explore)  
              #x = pd.DataFrame.from_dict(quick_explore, orient = 'index')
              x = pd.DataFrame([quick_explore])
              #print("x\n", x)
                
              # quick_explore_df = quick_explore_df.append(x)
              quick_explore_df = pd.concat([x, quick_explore_df], ignore_index=True)
          st.write(quick_explore_df)
          
            # st.write("Last 4 triggers were at: ")
            
            # # Index column error when the interval is 1d
            # st.write(df_pos[['Datetime','Close', 'Position']][:4]) 
            
            # st.toast(''' :red[BUY] ''', icon='🏃')  #:red[Red] :blue[Blue] :green[Green] :orange[Orange] :violet[BUY] 
      
          
          st.divider()
          
      
        
    # ###################################################
    # List View: 
    # # of all stocks; 
    # ###################################################
    with tab[1]:
      # st.write("Showing the List View of the selected stocks")
      ## Create two columns
      # col1, col2 = st.columns(2)
      
      # stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
      # df = sma_buy_sell_trigger(stock_hist_df, 5, 10)
      # print(df.info())
      # st.write(df)
      # sma_trigger_plot(df)
      
      # st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        
      
      # get stock metrics
        
      for symbol in known_options:
        st.subheader(symbol)
        yf_data = yf.Ticker(symbol) #initiate the ticker
        etf_summary_info = get_all_stock_info(yf_data)
        stock_caption = ("exchange: "+etf_summary_info.exchange[0]
                    + "; currency: "+etf_summary_info.currency[0])
                
        st.caption(stock_caption)
        
        stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
        stock_hist_df, df_pos = MovingAverageCrossStrategy(symbol,
                                    stock_hist_df,
                                    selected_short_window,
                                    selected_long_window,
                                    algo_strategy,
                                    True)  
        
        df_pos.reset_index(inplace=True)
        df_pos = df_pos.sort_index(ascending=False)
        # buy_sell = pd.DataFrame(df_pos.Notify.value_counts()).reset_index(inplace=True)
        # print(df_pos.)
        # print(df_pos.value_counts('Position'))                                                                  
        # print(buy_sell.columns)
        
        buy_trigger = len(df_pos[df_pos['Position']=='Buy'])
        sell_trigger = len(df_pos[df_pos['Position']=='Sell'])
        # print(buy_trigger, sell_trigger)
          
        col1, col2, col3, col4 = st.columns(4)
        
        with st.container(): # chart_container(chart_data):
          toast_message = (":red["
                            +"Fetching information for " 
                            + etf_summary_info.shortName[0] 
                            + " "+ symbol
                            +"]"
                    )
          st.toast(toast_message, icon='🏃')  
          # time.sleep(1)            
          col1.metric(label="Close", value= etf_summary_info.previousClose , delta=None)
          col1.metric(label="Open", value= etf_summary_info.open , delta=None) 
          col2.metric(label="Day Low", value= etf_summary_info.dayLow)
          col2.metric(label="Day High", value= etf_summary_info.dayHigh)
          col3.metric(label="52 week Low", value= etf_summary_info.fiftyTwoWeekLow)
          col3.metric(label="52 week High", value= etf_summary_info.fiftyTwoWeekHigh)
          col4.metric(label="Buy (period)", value= buy_trigger)
          col4.metric(label="Sell (period)", value= sell_trigger)
          
          expander = st.expander("Ticker trading prompts")
          # # expander.write(\"\"\"
          # #     The chart above shows some numbers I picked for you.
          # #     I rolled actual dice for these, so they're *guaranteed* to
          # #     be random.
          # # \"\"\")
          # # expander.image("https://static.streamlit.io/examples/dice.jpg")
          # expander.write("the last 10 records")
          days=1  
          # print(df_pos.columns)  
          cutoff_date = df_pos['Datetime'].iloc[0] - pd.Timedelta(days=days)
          # print ("cutoff_date")
          # print (cutoff_date)
        
          df1 = df_pos[df_pos['Datetime'] > cutoff_date]
          # print ("state till cutoff_date")
          expander.write(df1[['Datetime','Close', 'Position']]) 
      
        
         
    # ###################################################
    # Charts: 
    # # of stocks being watched; 
    # ###################################################
    with tab[2]:    
      for symbol in known_options:
        yf_data = yf.Ticker(symbol) #initiate the ticker
        
        st.session_state.page_subheader = '{0} ({1})'.format(yf_data.info['shortName'], yf_data.info['symbol'])
        st.subheader(st.session_state.page_subheader)
        # st.write(yf_data)
        st.write(symbol)
        st.write("Historical data per period (Showing EMA-5day period vs EMA-10day period)")
        
        # st.write("(Showing EMA-5day period vs EMA-10day period)")
        stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
        
        # ## Display the data table in the first column
        # st.dataframe(stock_hist_df.head(10))
        stock_df, df_position = MovingAverageCrossStrategy(symbol,
                                     stock_hist_df,
                                     selected_short_window,
                                     selected_long_window,
                                     algo_strategy,
                                     False)
        fig = draw_candle_stick_triggers(stock_hist_df, 
                                         symbol,
                                         selected_short_window,
                                         selected_long_window,
                                         algo_strategy
                                         )
        # Plot!
        # Create and display the bar chart in the second column
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        
        st.divider()

    # ###################################################
    # Details: 
    # Details of all stocks individually being watched; 
    # ###################################################
    with tab[3]:    
      st.write("Placeholder for details on the individual stocks")
      # stock_news_df = get_stk_news(yf_data)
      # st.write("News")
      # st.write(stock_news_df.to_html(escape=False, index=True), unsafe_allow_html=True)
      # st.divider()


    # tab1 = st.tabs(["🗃 Base Data"])
    # with tab1:

    

    #     # stock_news_df = get_stk_news(yf_data)
    #     # st.write("News")
    #     # st.write(stock_news_df.to_html(escape=False, index=True), unsafe_allow_html=True)
    #     # st.divider()
      
    #     st.write("Historical data per period")
    #     st.write("Showing EMA-5day period vs EMA-10day period")
    #     stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
    #     st.write(stock_hist_df.to_html(escape=False, index=True), unsafe_allow_html=True)
    #     st.divider()
    
  # for symbol in symbol_list:
# #     units = hist_df.query("Symbol == @symbol")['Units'].sum()

# #     ticker = yf.Ticker(symbol)

# #     data['symbol'].append(ticker.info['symbol'])
# #     data['industry'].append(ticker.info['industry'])
# #     data['units'].append(units)
# #     current_price = ticker.info['currentPrice']
# #     data['current_price'].append(current_price)
# #     # Round to 2 decimal points
# #     market_value = round(units * current_price, 2)
# #     data['market_value'].append(market_value)

# #     # Prev close value to calculate day change
# #     prev_close = ticker.info['previousClose']
# #     day_change = (current_price - prev_close) * units
# #     data['day_change'].append(day_change)
# #     data['day_change_pct'].append(((current_price/prev_close) - 1) * 100)

# #     # History data for 12 months
# #     history = ticker.history(period='1y')['Close']

# # showing for just 1 ticker
# yf_data = yf.Ticker(ticker) #initiate the ticker

  # tab1, tab2 = st.tabs(["🗃 Data","📈 Chart"])

  # with tab1:

  #     # Subheader with company name and symbol
  #     st.session_state.page_subheader = '{0} ({1})'.format(yf_data.info['shortName'], yf_data.info['symbol'])
  #     st.subheader(st.session_state.page_subheader)
  #     # st.write(yf_data)

  #     stock_info_df = get_all_stock_info(yf_data)
  #     st.write("Overview")
  #     st.write(stock_info_df.to_html(escape=False, index=False), unsafe_allow_html=True)

  #     st.divider()

      
  #     st.write("Historical data per period")
  #     st.write("Showing EMA-5day period vs EMA-10day period")
  #     stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
  #     st.write(stock_hist_df.to_html(escape=False, index=True), unsafe_allow_html=True)
  #     st.divider()
      
  # with tab2:
  #     fig = draw_candle_stick_triggers(stock_hist_df, ticker)
  #     # Plot!
  #     st.plotly_chart(fig, theme="streamlit", use_container_width=True)

  return

if __name__ == '__main__':
  main()

# # https://www.quantstart.com/articles/candlestick-subplots-with-plotly-and-the-alphavantage-api/

# etf_info = pd.DataFrame()
# etf_data = {} # dictionary
# for symbol in symbol_list:
#     ticker = yf.Ticker(symbol)
#     # df = get_all_stock_info(ticker)

#     etf_data[symbol] = get_hist_info(ticker, period, interval)
#     etf_info = pd.concat([get_all_stock_info(ticker), etf_info], ignore_index=True)

#     # History data for 12 months
#     history = ticker.history(period='1y')[['Open', 'Close']]
#     # Convert the history series to a DF
#     history_df = history #.to_frame()
#     # display (ticker)
#     # display (history_df.head(5))

#     # # Add the sparkline for 12 month Open history data
#     # spark_img = sparkline(history_df, 'Open')
#     # spark_img_url =  ('<img src="data:/png;pybase64,{}"/>'.format(spark_img))
#     # etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Open'] = (spark_img_url)

#     # # Add the sparkline for 12 month Close history data
#     # etf_info.loc[etf_info['symbol'] == symbol, 'last_12_months_Close'] = sparkline(history_df, 'Close')

    
# etf_info = etf_info.drop(columns=['index']   )
# st.write(etf_info)

# #########################################################
# IGNORE BELOW
# #########################################################
