# -*- coding: utf-8 -*-
"""AlgoTrading_v3.2_panel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MuK4_G2Nf8oow21NW_a3pHg_35JgVSI
"""
from algotrading_helper import *
from algotrading_visualisations import *
from algotrading_class import *

from pathlib import Path

pd.options.display.float_format = '${:,.2f}'.format

import streamlit.components.v1 as components

def main():
  
  st.set_page_config(
    page_title="Convex Trades Dashboard",
    page_icon="🧊",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://convextrades.com/',
        # 'Report a bug': "mailto:rupinder.johar.kohli@gmail.com",
        'About': "#An *extremely* cool app displaying your GoTo Trading Dashboard!"
    }
  )    
  # """### Select Stock and Time interval"""
  # https://github.com/smudali/stocks-analysis/blob/main/dasboard/01Home.py
  # new_ticker_list = []
  
  # new_ticker = add_ticker()
  
  symbol_list = load_config()
  
  # print(type(symbol_list))
  
  symbol_list = np.sort(symbol_list)
  # print(symbol_list)
  
  # base_symbol_list = ["MSFT","PLTR","TSLA","NVDA","AMZN", "NFLX","BA","GS","SPY","QQQ","IWM","SMH","RSP"]
  # symbol_list = base_symbol_list # new_ticker_list
  
  # NSE: TATAPOWER: Tata Power Company Ltd
  # NSE: TATAINVEST: Tata Investment Corporation Ltd

  ma_list = ["SMA", "EMA"]
  algo_list = ["3-Candle Reversal"]
  
  # user selected list of tickers
  # load_user_selected_options()
  user_sel_list = []
  
  # load_user_selected_options()
  
  user_sel_list = load_user_selected_options()
  print(user_sel_list)
  
  # ticker selection
  st.sidebar.header("Choose your Stock filter: ")
  ticker = st.sidebar.multiselect('Choose Ticker', options=symbol_list,
                                help = 'Select a ticker', 
                                key='ticker_list',
                                max_selections=8,
                                default= user_sel_list, #["TSLA"],
                                placeholder="Choose an option",
                                # on_change=update_selection(),
                                )
  print(ticker)
  print(st.session_state)
  known_options = ticker
  save_user_selected_options(ticker)
  
  # period selection
  selected_period = st.sidebar.selectbox(
      'Select Period', options=['1d','5d','1mo','3mo', '6mo', 'YTD', '1y', 'all'], index=1)
  
  # interval selection
  selected_interval = st.sidebar.selectbox(
      'Select Intervals', options=['1m','2m','5m','15m','30m','60m','90m','1h','1d','5d','1wk','1mo','3mo'], index=2)
  
  # trading strategy selection
  algo_strategy = st.sidebar.selectbox(
      'Select Algo Strategy', options=['SMA', 'EMA', "3-Candle Reversal"], index=2)
  selected_short_window =  st.sidebar.number_input(":gray[Short Window]", step = 1, value=5)  
  selected_long_window =  st.sidebar.number_input(":gray[Long Window]", step = 1, value=8)   

  #         Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
  # Either Use period parameter or use start and end
  #     interval : str
  #         Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo

  ema_period1 = selected_short_window
  ema_period2 = selected_long_window

  if len(known_options) == 0:
    st.write ("Please select a ticker in the sidebar")
    return
  else:
    tab = st.tabs(["Summary","List View","Visualisations", "News", "Customization", "Release Notes"])
    # ###################################################
    # Summary: 
    # # of stocks being watched; 
    # Algo being used
    # # of winining vs losing trades
    # # best stocks
    # ###################################################
    with tab[0]:    
      # creates the container for page title
      dash_1 = st.container()

      with dash_1:
          st.markdown("<h3 style='text-align: center;'>You are watching</h3>", unsafe_allow_html=True)
          st.write("")
          
          # get basics
          selected_stocks = len(known_options) 

          col1, col2, col3, col4 = st.columns(4)
          # create column span
          col1.metric(label="No. Stocks Watch", value= selected_stocks , delta=None)
          col2.metric(label="Period", value= selected_period , delta=None)
          col3.metric(label="Interval", value= selected_interval , delta=None)
          # trading_strategy = str(algo_strategy) + '_' + str(selected_short_window) + '_' + str(selected_long_window) + '_crossover'
          col4.metric(label="Trading Strategy", value= algo_strategy , delta=None)
        
      st.divider()
       
      dash_2 = st.container()
      with dash_2:
        
          title = "Strategy: " + algo_strategy
          st.subheader(title)
          st.divider()
          
          # Collate high level stats on the data
          quick_explore = {}
          
          quick_explore_df = pd.DataFrame() 
          etf_info = pd.DataFrame()
          etf_data = {} # dictionary
         
          if any(ma in algo_strategy for ma in ma_list):
            # print("TAB1: Moving Average Strategy")
            short_window_col = str(selected_short_window) + '_' + algo_strategy
            long_window_col = str(selected_long_window) + '_' + algo_strategy  
            for symbol in known_options:
                # st.subheader(symbol)
                stock_name =  symbol
                yf_data = yf.Ticker(symbol) #initiate the ticker
                stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
                  
                stock_df, df_pos, previous_triggers = MovingAverageCrossStrategy(symbol,
                                          stock_hist_df,
                                          selected_short_window,
                                          selected_long_window,
                                          algo_strategy,
                                          True)
                
                
                # put this to a new tab on click of the button
                # ###################################################
                # st.write((stock_df.sort_index(ascending=False)[:10])) 
                
                etf_data[symbol] = stock_df
                
                # previous_triggers_list = previous_triggers
                previous_triggers = previous_triggers.reset_index()
                
                stock_day_close = get_current_price(symbol, selected_period, selected_interval)
                stock_price_at_trigger = df_pos.loc[df_pos.index == df_pos.index.max(), "Close"].to_list()[0]
                stock_trigger_at = df_pos.index.max()
                stock_trigger_state = df_pos.loc[df_pos.index == df_pos.index.max(), "Position"].to_list()[0]
                
                # (buy order) profit order is + if trigger is Buy; loss order is - if trigger is Buy 
                # (sell order) profit order is - if trigger is Sell; loss order is + if trigger is Buy 
                
                if (stock_trigger_state == "Buy"):
                  stock_stop_loss_atr = (stock_price_at_trigger - df_pos.loc[(df_pos.index == df_pos.index.max()), "atr_ma"]).to_list()[0]
                  stock_take_profit_atr = (stock_price_at_trigger + 2*df_pos.loc[(df_pos.index == df_pos.index.max()), "atr_ma"]).to_list()[0]
                elif (stock_trigger_state == "Sell"):
                  stock_stop_loss_atr = (stock_price_at_trigger + df_pos.loc[(df_pos.index == df_pos.index.max()), "atr_ma"]).to_list()[0]
                  stock_take_profit_atr = (stock_price_at_trigger - 2*df_pos.loc[(df_pos.index == df_pos.index.max()), "atr_ma"]).to_list()[0]
                
                stock_ema_p1 = df_pos.loc[df_pos.index == df_pos.index.max(), short_window_col].to_list()[0]
                stock_ema_p2 = df_pos.loc[df_pos.index == df_pos.index.max(), long_window_col].to_list()[0]
                
                stock_atr_ma = df_pos.loc[(df_pos.index == df_pos.index.max()), "atr_ma"].to_list()[0]
                
                stock_view_details = etf_data[symbol]
                # stock_previous_triggers = previous_triggers.index.astype(str).to_list() #df_pos.Position[:6]#.to_list()
                
                for variable in ["symbol",
                                "stock_trigger_at",
                                "stock_trigger_state",
                                "stock_price_at_trigger",
                                "stock_stop_loss_atr",
                                "stock_take_profit_atr",
                                "stock_atr_ma",
                                "stock_ema_p1",
                                "stock_ema_p2",
                                # "stock_previous_triggers"
                                ]:
                  quick_explore[variable] = eval(variable)
                x = pd.DataFrame([quick_explore])
                  
                quick_explore_df = pd.concat([x, quick_explore_df], ignore_index=True)
            quick_explore_df = quick_explore_df.sort_values(by = ['stock_trigger_at'], ascending=False)
            # quick_explore_df = quick_explore_df.set_index(['symbol'])
            # print(quick_explore_df)
            
            st.data_editor(
            quick_explore_df,
            column_config={"stock_trigger_state": st.column_config.TextColumn(
                "Trigger",
                width="small"
            ),
                           "stock_take_profit_atr": st.column_config.NumberColumn(
                "Take Profit Price",
                format="%.2f",
            ),
                          "stock_stop_loss_atr": st.column_config.NumberColumn(
                "Stop Loss Price",
                format="%.2f",
            ),
                          "stock_price_at_trigger": st.column_config.NumberColumn(
                "Trigger Price",
                format="%.2f",
            ),
                          "stock_atr_ma": st.column_config.NumberColumn(
                "ATR MA",
                format="%.2f",
            ),
            #               "stock_previous_triggers": st.column_config.ListColumn(
            #     "Previous Triggers",
            #     # width="medium",
            # ),
                          "stock_trigger_at": st.column_config.DatetimeColumn(
              "Trigger Time",
              format="DD MMM YYYY, HH:MM"
              ),
                          "stock_ema_p1": st.column_config.NumberColumn(
                "EMA P1",
                format="%.2f",
            ),
                          "stock_ema_p2": st.column_config.NumberColumn(
                "EMA P2",
                format="%.2f",
            ),
                # "stock_view_details": st.column_config.LinkColumn
                # (
                #     "Stock Details",
                #     help="The top trending Streamlit apps",
                #     max_chars=100,
                #     display_text="view table",
                #     # default=add_container(etf_data[symbol], quick_explore_df[symbol])
                # ),
                
            },
            hide_index=True,
            )
    
            st.divider()
            # return
          # st.write(etf_data["NVDA"])
          elif (any(algo in algo_strategy for algo in algo_list)):
            for symbol in known_options:
                # st.subheader(symbol)
                stock_name =  symbol
                # st.write(stock_name, algo_strategy)
                yf_data = yf.Ticker(symbol) #initiate the ticker
                # print(yf_data)
                stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
                # st.write(stock_hist_df.head())
                # st.write('4-3-1 candle reversal')
                df_four_three_one_soldiers = summary_four_three_one_soldiers(stock_hist_df)
                # st.write(df_four_three_one_soldiers)
                
                stock_trigger_at = df_four_three_one_soldiers.index.max()
                stock_trigger_state = df_four_three_one_soldiers.loc[df_four_three_one_soldiers.index ==  stock_trigger_at, "position"].to_list()[0]
                stock_price_at_trigger = df_four_three_one_soldiers.loc[df_four_three_one_soldiers.index ==  stock_trigger_at, "Close"].to_list()[0]
                
                for variable in ["symbol",
                                "stock_trigger_at",
                                "stock_trigger_state",
                                "stock_price_at_trigger",
                                # "stock_stop_loss_atr",
                                # "stock_take_profit_atr",
                                # "stock_atr_ma",
                                # "stock_ema_p1",
                                # "stock_ema_p2",
                                # "stock_previous_triggers"
                                ]:
                  quick_explore[variable] = eval(variable)
                x = pd.DataFrame([quick_explore])
                  
                quick_explore_df = pd.concat([x, quick_explore_df], ignore_index=True)
            quick_explore_df = quick_explore_df.sort_values(by = ['stock_trigger_at'], ascending=False)
            # quick_explore_df = quick_explore_df.set_index(['symbol'])
            # print(quick_explore_df)
            
            st.data_editor(
            quick_explore_df,
            column_config={"stock_trigger_state": st.column_config.TextColumn(
                "Trigger",
                width="small"
            ),
                          "stock_price_at_trigger": st.column_config.NumberColumn(
                "Trigger Price",
                format="%.2f",
            ),
                          "stock_trigger_at": st.column_config.DatetimeColumn(
              "Trigger Time",
              format="DD MMM YYYY, HH:MM"
              ),
            },  
            hide_index=True,
            )
            
                
                 
        
    # ###################################################
    # List View: 
    # # of all stocks; 
    # ###################################################
    with tab[1]:
      
      # get stock metrics
      # print(algo_strategy)
      title = "Strategy: " + algo_strategy
      st.subheader(title)
      st.divider()
  
      if any(ma in algo_strategy for ma in ma_list):
        short_window_col = str(selected_short_window) + '_' + algo_strategy
        long_window_col = str(selected_long_window) + '_' + algo_strategy  
        # st.write(short_window_col) 
        for symbol in known_options:
          st.subheader(symbol)
          try:
            yf_data = yf.Ticker(symbol) #initiate the ticker
            etf_summary_info = get_all_stock_info(yf_data)
            stock_caption = ("exchange: "+etf_summary_info.exchange[0]
                        + "; currency: "+etf_summary_info.currency[0])
                    
            st.caption(stock_caption)
            
            stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
          
            stock_hist_df, df_pos, previous_triggers = MovingAverageCrossStrategy(symbol,
                                        stock_hist_df,
                                        selected_short_window,
                                        selected_long_window,
                                        algo_strategy,
                                        True)  
            
            df_pos.reset_index(inplace=True)
            df_pos = df_pos.sort_index(ascending=False)
            
            buy_trigger = len(df_pos[df_pos['Position']=='Buy'])
            sell_trigger = len(df_pos[df_pos['Position']=='Sell'])
            
            col1, col2, col3, col4 = st.columns(4)
            
            with st.container(): # chart_container(chart_data):
              toast_message = (":red["
                                +"Fetching information for " 
                                + etf_summary_info.shortName[0] 
                                + " "+ symbol
                                +"]"
                        )
              st.toast(toast_message, icon='🏃')  
              # time.sleep(1)            
              col1.metric(label="Close", value= etf_summary_info.previousClose , delta=None)
              col1.metric(label="Open", value= etf_summary_info.open , delta=None) 
              col2.metric(label="Day Low", value= etf_summary_info.dayLow)
              col2.metric(label="Day High", value= etf_summary_info.dayHigh)
              col3.metric(label="52 week Low", value= etf_summary_info.fiftyTwoWeekLow)
              col3.metric(label="52 week High", value= etf_summary_info.fiftyTwoWeekHigh)
              col4.metric(label="Buy (period)", value= buy_trigger)
              col4.metric(label="Sell (period)", value= sell_trigger)
              
              expander = st.expander("Ticker trading prompts")
              
              days=1  
              cutoff_date = df_pos['Datetime'].iloc[0] - pd.Timedelta(days=days)
              
              df1 = df_pos[df_pos['Datetime'] > cutoff_date]
              # print ("state till cutoff_date")
              
              df1.Datetime = df1.Datetime.dt.strftime('%Y/%m/%d %H:%M')
              
              # ToDo: Show more columns as per the Summary tab
              expander.write(df1[['Datetime','Close', 'Position']]) 
          except:
            print('Error loading stock data for ' + symbol)
            return None 
              
      elif (any(algo in algo_strategy for algo in algo_list)): 
        for symbol in known_options:
          stock_name =  symbol
          # print(algo_strategy)
          yf_data = yf.Ticker(symbol) #initiate the ticker
          stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
          # stock_hist_df = stock_hist_df.reset_index()
          
          # st.write("3 white soldiers")
          
          # # print(stock_hist_df.columns)
          # stock_hist_df["white_soldiers"] = candle_three_white_soldiers(stock_hist_df)
          
          # df_white_soldiers = (stock_hist_df[stock_hist_df["white_soldiers"] == True])
          # st.write(df_white_soldiers[['Open', 'High', 'Low', 'Close','candle_type']])
          
          # # df_strategy_431, position = candle_four_three_one_soldiers(stock_hist_df, False)
          
          # st.write("4-3-1 candle reversal")
          if (algo_strategy == "3-Candle Reversal" ):
            stock_hist_df = candle_four_three_one_soldiers(stock_hist_df, False)
            df_strategy_431 = stock_hist_df
            
            # st.write(df_strategy_431.sort_index(ascending=False)[['High', 'Low', 'Open', 'Close','strategy_431_long','strategy_431_short']])
            st.write(symbol)
            st.write(df_strategy_431.sort_index(ascending=False))
            
            st.write("filtered data - strategy_431_long", symbol)
            df_strategy_431_long = (stock_hist_df[stock_hist_df["strategy_431_long"] == True])
            st.write(df_strategy_431_long.sort_index(ascending=False))
            
            st.write("filtered data - strategy_431_short", symbol)
            df_strategy_431_short = (stock_hist_df[stock_hist_df["strategy_431_short"] == True])
            st.write(df_strategy_431_short.sort_index(ascending=False))
   
        
    # ###################################################
    # Charts: 
    # # of stocks being watched; 
    # ###################################################
    with tab[2]:  
      title = "Strategy: " + algo_strategy
      st.subheader(title)
      st.divider()
      if any(ma in algo_strategy for ma in ma_list):
        # print("TAB3: Moving Average Strategy", algo_strategy)
        # short_window_col = str(selected_short_window) + '_' + algo_strategy
        # long_window_col = str(selected_long_window) + '_' + algo_strategy   
        for symbol in known_options:
          yf_data = yf.Ticker(symbol) #initiate the ticker
          
          st.session_state.page_subheader = '{0} ({1})'.format(yf_data.info['shortName'], yf_data.info['symbol'])
          st.subheader(st.session_state.page_subheader)
          # st.write(yf_data)
          # st.write(symbol)
          st.write("Historical data per period (Showing EMA-5day period vs EMA-10day period)")
          
          # st.write("(Showing EMA-5day period vs EMA-10day period)")
          stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
        
          stock_df, df_pos, previous_triggers = MovingAverageCrossStrategy(symbol,
                                          stock_hist_df,
                                          selected_short_window,
                                          selected_long_window,
                                          algo_strategy,
                                          False)
          # Plot!
          # Create and display the bar chart in the second column
          fig = draw_candle_stick_triggers(symbol, 
                                          stock_df,
                                          selected_short_window,
                                          selected_long_window,
                                          algo_strategy)
          st.plotly_chart(fig, theme="streamlit", use_container_width=True)
          
          # use streamlit light weight charts
          lw_charts_snapshot(symbol, 
                            stock_hist_df, 
                            algo_strategy,
                            selected_short_window,
                            selected_long_window,
                            False)
        
      elif (any(algo in algo_strategy for algo in algo_list)): 
        # st.write(algo_strategy) 
        # st.write("3-Candle Reversal Strategy") 
        for symbol in known_options:
          # st.subheader(symbol)
          stock_name =  symbol
          # print(stock_name)
          yf_data = yf.Ticker(symbol) #initiate the ticker
          # print(yf_data)
          stock_hist_df = get_hist_info(yf_data, selected_period, selected_interval)
          # print(stock_hist_df.head())
          
          fig = draw_candle_stick_chart(stock_hist_df,symbol)
          st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    
    st.divider()

    # ###################################################
    # Details: 
    # Details of all stocks individually being watched; 
    # ###################################################
    with tab[3]:    
      st.subheader("News on the selected stocks")
      for symbol in known_options:
        st.session_state.page_subheader = '{0} ({1})'.format(yf_data.info['shortName'], yf_data.info['symbol'])
        st.subheader(st.session_state.page_subheader)
        yf_data = yf.Ticker(symbol) #initiate the ticker
        stock_news_df = get_stk_news(yf_data)
        # st.write(stock_news_df)
        st.data_editor(
            stock_news_df,
            column_config={
                "link": st.column_config.LinkColumn(
                    "News Link", #display_text="Open profile"
                ),
            },
            hide_index=True,
        )
      # st.write("News")
      # st.write(stock_news_df.to_html(escape=False, index=True), unsafe_allow_html=True)
      st.divider()
      
    # ###################################################
    # Volatility Indicators
    # ###################################################
    with tab[4]:    
      st.subheader("Customise Stocks list")
      # new_ticker_list = add_ticker()
      # new_element = st.text_input("Add a new symbol:", "ABB")
      # symbol_list.append(str(new_element))
      # base_symbol_list = symbol_list
      # print(symbol_list)
      # if st.button("Update Ticker"):
      #     streamlit_js_eval(js_expressions="parent.window.location.reload()")
  
      ticker_list = ""
      ticker_list = st.text_area(":red[enter the ticker list seperated with commas]",
                                 key='new_ticker'
          )
      
      # st.button("Update Ticker", type="primary")
      
      # st.write(ticker_list)
      # print((type(ticker_list)))
      # st.write(list(ticker_list.split(",")))
      
      if (st.button("Update Ticker")):
        with open('config.properties', 'r', encoding='utf-8') as file: 
          data = file.readlines() 
        
          # print(data[1]) 
          data[1] = data[1].replace('\n', '')
          # print("postsplit", data[1])
          
          data[1] = data[1]+","+ticker_list+"\n"
          # print(data[1])
          
          # print(data)
            
        with open('config.properties', 'w', encoding='utf-8') as file: 
          file.writelines(data) 
        
        ticker_list = ""
      # del st.session_state[new_ticker]
      # Clear the input box after hitting enter
      # st.session_state["new_ticker"] = ""
      # ticker_list
    
    with tab[5]:
      st.subheader("Change Log")
      st.write("- Implemented Moving Averages EMA strategy.")
      st.write("- Ability to add more stocks to the existing watchlist from the universe of all stocks allowed by the app.")
      st.write("- Add your own stock tickers through the Customisation tab.")
      st.write("- Added 4-3-1 Candle Reversal Strategy.")
      st.write("- News about the selected stocks is listed.")
      
  return

if __name__ == '__main__':
  main()

# # https://www.quantstart.com/articles/candlestick-subplots-with-plotly-and-the-alphavantage-api/
